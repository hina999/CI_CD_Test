<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Oanda.Rest</name>
    </assembly>
    <members>
        <member name="T:Rabun.Oanda.Rest.Endpoints.AccountEndpoints">
            <summary>
            Account endpoints
            </summary>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.AccountEndpoints.#ctor(System.String,Rabun.Oanda.Rest.Base.AccountType)">
            <summary>
            Initializes a new instance of the <see cref="T:Rabun.Oanda.Rest.Endpoints.AccountEndpoints"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="accountType">Type of the account.</param>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.AccountEndpoints.GetAccounts">
            <summary>
            This will return all accounts given access token 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.AccountEndpoints.GetAccountDetails(System.Int32)">
            <summary>
            Get information of a given account
            </summary>
            <param name="accountId">AccountId of the given account</param>
            <returns></returns>
        </member>
        <member name="T:Rabun.Oanda.Rest.Endpoints.OrderEndpoints">
            <summary>
            Order endpoints
            </summary>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.OrderEndpoints.#ctor(System.String,Rabun.Oanda.Rest.Base.AccountType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rabun.Oanda.Rest.Endpoints.OrderEndpoints"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="accountType">Type of the account.</param>
            <param name="accountId">The account identifier.</param>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.OrderEndpoints.GetOrders">
            <summary>
            This will return all pending orders for an account. 
            Note: pending take profit or stop loss orders are recorded in the open trade object, and will not be returned in this request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.OrderEndpoints.GetOrders(System.String)">
            <summary>
            This will return all pending orders for an account. 
            Note: pending take profit or stop loss orders are recorded in the open trade object, and will not be returned in this request.
            </summary>
            <param name="instrument">Retrieve open orders for a specific instrument only</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.OrderEndpoints.GetOrders(System.String,System.Int32)">
            <summary>
            This will return all pending orders for an account. 
            Note: pending take profit or stop loss orders are recorded in the open trade object, and will not be returned in this request.
            </summary>
            <param name="instrument">Retrieve open orders for a specific instrument only</param>
            <param name="count">Maximum number of open orders to return. Default: 50. Max value: 500</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.OrderEndpoints.GetOrders(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.String)">
            <summary>
            This will return all pending orders for an account. 
            Note: pending take profit or stop loss orders are recorded in the open trade object, and will not be returned in this request.
            </summary>
            <param name="instrument">Retrieve open orders for a specific instrument only</param>
            <param name="count">Maximum number of open orders to return. Default: 50. Max value: 500</param>
            <param name="maxId">The server will return orders with id less than or equal to this, in descending order (for pagination)</param>
            <param name="ids">An URL encoded comma (%2C) separated list of orders to retrieve. 
            Maximum number of ids: 50. No other parameter may be specified with the ids paramete</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.OrderEndpoints.GetOrder(System.Int64)">
            <summary>
            Get information for an order
            </summary>
            <param name="orderId">Order id</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.OrderEndpoints.CreateOrder(System.String,System.Int32,Rabun.Oanda.Rest.Models.OandaTypes.Side,Rabun.Oanda.Rest.Models.OandaTypes.OrderType,System.Nullable{System.DateTime},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Create a new order
            </summary>
            <param name="instrument">Required Instrument to open the order on</param>
            <param name="units">Required The number of units to open order for</param>
            <param name="side">Required Direction of the order, either "buy" or "sell"</param>
            <param name="type">Required The type of the order "limit", "stop", "marketIfTouched’ or "market"</param>
            <param name="expiry">Required If order type is "limit", "stop", or "marketIfTouched". The order expiration time in UTC. The value specified must be in a valid datetime format</param>
            <param name="price">Required If order type is "limit", "stop", or "marketIfTouched". The price where the order is set to trigger at</param>
            <param name="lowerBound">Optional The minimum execution price</param>
            <param name="upperBound">Optional The maximum execution price</param>
            <param name="stopLoss">The stop loss price</param>
            <param name="takeProfit">Optional The take profit price</param>
            <param name="trailingStop">Optional The trailing stop distance in pips, up to one decimal place</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.OrderEndpoints.CreateMarketOrder(System.String,System.Int32,Rabun.Oanda.Rest.Models.OandaTypes.Side)">
            <summary>
            Create a new market order
            </summary>
            <param name="instrument">Required Instrument to open the order on</param>
            <param name="units">Required The number of units to open order for</param>
            <param name="side">Required Direction of the order, either "buy" or "sell"</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.OrderEndpoints.CreateMarketOrder(System.String,System.Int32,Rabun.Oanda.Rest.Models.OandaTypes.Side,System.Single,System.Single)">
            <summary>
            Create a new market order
            </summary>
            <param name="instrument">Required Instrument to open the order on</param>
            <param name="units">Required The number of units to open order for</param>
            <param name="side">Required Direction of the order, either "buy" or "sell"</param>
            <param name="stopLoss">The stop loss price</param>
            <param name="takeProfit">Optional The take profit price</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.OrderEndpoints.CreateMarketIfTouchedOrder(System.String,System.Int32,Rabun.Oanda.Rest.Models.OandaTypes.Side,System.DateTime,System.Single)">
            <summary>
            Create a new order
            </summary>
            <param name="instrument">Required Instrument to open the order on</param>
            <param name="units">Required The number of units to open order for</param>
            <param name="side">Required Direction of the order, either "buy" or "sell"</param>
            <param name="expiry">Required If order type is "limit", "stop", or "marketIfTouched". The order expiration time in UTC. The value specified must be in a valid datetime format</param>
            <param name="price">Required If order type is "limit", "stop", or "marketIfTouched". The price where the order is set to trigger at</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.OrderEndpoints.CloseOrder(System.Int64)">
            <summary>
            Close order
            </summary>
            <param name="orderId">Order id</param>
            <returns></returns>
        </member>
        <member name="T:Rabun.Oanda.Rest.Endpoints.PositionEndpoints">
            <summary>
            Position endpoints
            </summary>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.PositionEndpoints.#ctor(System.String,Rabun.Oanda.Rest.Base.AccountType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rabun.Oanda.Rest.Endpoints.PositionEndpoints"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="accountType">Type of the account.</param>
            <param name="accountId">The account identifier.</param>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.PositionEndpoints.GetPositions">
            <summary>
            Get a list of all open positions
            </summary>
            <returns>list of positions</returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.PositionEndpoints.GetPosition(System.String)">
            <summary>
            Get the position for an instrument
            </summary>
            <param name="instrument">instrument</param>
            <returns>position</returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.PositionEndpoints.ClosePosition(System.String)">
            <summary>
            Close an existing position
            </summary>
            <param name="instrument">instrument instrument</param>
            <returns></returns>
        </member>
        <member name="T:Rabun.Oanda.Rest.Endpoints.RateEndpoints">
            <summary>
            Rate endpoints
            </summary>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.#ctor(System.String,Rabun.Oanda.Rest.Base.AccountType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rabun.Oanda.Rest.Endpoints.RateEndpoints"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="accountType">Type of the account.</param>
            <param name="accountId">The account identifier.</param>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetInstruments">
            <summary>
            Get an instrument list
            Get a list of tradeable instruments (currency pairs, CFDs, and commodities) that are available for trading with the account specified.
            </summary>
            <returns>Task of InstrumentModel List</returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetInstruments(System.String)">
            <summary>
            Get an instrument list
            Get a list of tradeable instruments (currency pairs, CFDs, and commodities) that are available for trading with the account specified.
            </summary>
            <param name="instruments">
            Optional An URL encoded (%2C) comma separated list of instruments that are to be returned in the response.
            If the instruments option is not specified, all instruments will be returned.
            </param>
            <returns>Task of InstrumentModel List</returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetInstruments(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fields">
            Optional An URL encoded (%2C) comma separated list of instrument fields that are to be returned in the response.
            The instrument field will be returned regardless of the input to this query parameter.
            Please see the Response Parameters section below for a list of valid values.
            </param>
            <param name="instruments">
            Optional An URL encoded (%2C) comma separated list of instruments that are to be returned in the response.
            If the instruments option is not specified, all instruments will be returned.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetPrices(System.String)">
            <summary>
            Get current prices
            </summary>
            <param name="instruments">
            Required An URL encoded (%2C) comma separated list of instruments to fetch prices for.
            Values should be one of the available instrument from the /v1/instruments response.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetCandles(System.String)">
            <summary>
            Retrieve instrument history
            Get historical information on an instrument
            </summary>
            <param name="instrument">
            Required Name of the instrument to retrieve history for. 
            The instrument should be one of the available instrument from the /v1/instruments response
            </param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetCandles(System.String,Rabun.Oanda.Rest.Models.OandaTypes.GranularityType)">
            <summary>
            Retrieve instrument history
            Get historical information on an instrument
            </summary>
            <param name="instrument">
            Required Name of the instrument to retrieve history for. 
            The instrument should be one of the available instrument from the /v1/instruments response
            </param>
            <param name="granularity">
            Optional The time range represented by each candlestick. The value specified will determine the alignment of the first candlestick.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetCandles(System.String,Rabun.Oanda.Rest.Models.OandaTypes.GranularityType,System.Int32)">
            <summary>
            Retrieve instrument history
            Get historical information on an instrument
            </summary>
            <param name="instrument">
            Required Name of the instrument to retrieve history for. 
            The instrument should be one of the available instrument from the /v1/instruments response
            </param>
            <param name="granularity">
            Optional The time range represented by each candlestick. The value specified will determine the alignment of the first candlestick.
            </param>
            <param name="count">
            The number of candles to return in the response.
            This parameter may be ignored by the server depending on the time range provided.
            See “Time and Count Semantics” below for a full description.
            If not specified, count will default to 500. The maximum acceptable value for count is 5000.
            Count should not be specified if both the start and end parameters are also specified.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetCandles(System.String,Rabun.Oanda.Rest.Models.OandaTypes.GranularityType,System.DateTime,System.DateTime)">
            <summary>
            Retrieve instrument history
            Get historical information on an instrument
            </summary>
            <param name="instrument">
            Required Name of the instrument to retrieve history for. 
            The instrument should be one of the available instrument from the /v1/instruments response
            </param>
            <param name="granularity">
            Optional The time range represented by each candlestick. The value specified will determine the alignment of the first candlestick.
            </param>
            <param name="start">
            The start timestamp for the range of candles requested. The value specified must be in a valid datetime format.
            </param>
            <param name="end">
            The end timestamp for the range of candles requested. The value specified must be in a valid datetime format.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetCandlesMid(System.String)">
            <summary>
            Retrieve instrument history
            Get historical information on an instrument
            </summary>
            <param name="instrument">
            Required Name of the instrument to retrieve history for. 
            The instrument should be one of the available instrument from the /v1/instruments response
            </param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetCandlesMid(System.String,Rabun.Oanda.Rest.Models.OandaTypes.GranularityType)">
            <summary>
            Retrieve instrument history
            Get historical information on an instrument
            </summary>
            <param name="instrument">
            Required Name of the instrument to retrieve history for. 
            The instrument should be one of the available instrument from the /v1/instruments response
            </param>
            <param name="granularity">
            Optional The time range represented by each candlestick. The value specified will determine the alignment of the first candlestick.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetCandlesMid(System.String,Rabun.Oanda.Rest.Models.OandaTypes.GranularityType,System.Int32)">
            <summary>
            Retrieve instrument history
            Get historical information on an instrument
            </summary>
            <param name="instrument">
            Required Name of the instrument to retrieve history for. 
            The instrument should be one of the available instrument from the /v1/instruments response
            </param>
            <param name="granularity">
            Optional The time range represented by each candlestick. The value specified will determine the alignment of the first candlestick.
            </param>
            <param name="count">
            The number of candles to return in the response.
            This parameter may be ignored by the server depending on the time range provided.
            See “Time and Count Semantics” below for a full description.
            If not specified, count will default to 500. The maximum acceptable value for count is 5000.
            Count should not be specified if both the start and end parameters are also specified.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetCandlesMid(System.String,Rabun.Oanda.Rest.Models.OandaTypes.GranularityType,System.DateTime,System.DateTime)">
            <summary>
            Retrieve instrument history
            Get historical information on an instrument
            </summary>
            <param name="instrument">
            Required Name of the instrument to retrieve history for. 
            The instrument should be one of the available instrument from the /v1/instruments response
            </param>
            <param name="granularity">
            Optional The time range represented by each candlestick. The value specified will determine the alignment of the first candlestick.
            </param>
            <param name="start">
            The start timestamp for the range of candles requested. The value specified must be in a valid datetime format.
            </param>
            <param name="end">
            The end timestamp for the range of candles requested. The value specified must be in a valid datetime format.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetCandles(System.String,System.Nullable{Rabun.Oanda.Rest.Models.OandaTypes.GranularityType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Rabun.Oanda.Rest.Models.OandaTypes.CandleFormat},System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{Rabun.Oanda.Rest.Models.OandaTypes.WeeklyAlignment})">
            <summary>
            Retrieve instrument history
            Get historical information on an instrument
            </summary>
            <param name="instrument">
            Required Name of the instrument to retrieve history for. 
            The instrument should be one of the available instrument from the /v1/instruments response
            </param>
            <param name="granularity">
            Optional The time range represented by each candlestick. The value specified will determine the alignment of the first candlestick.
            </param>
            <param name="start">
            The start timestamp for the range of candles requested. The value specified must be in a valid datetime format.
            </param>
            <param name="end">
            The end timestamp for the range of candles requested. The value specified must be in a valid datetime format.
            </param>
            <param name="candleFormat">
            Candlesticks representation (about candestick representation).
            This can be one of the following: “midpoint” - Midpoint based candlesticks.
            “bidask” - Bid/Ask based candlesticks The default for candleFormat is “bidask” if the candleFormat parameter is not specified.
            </param>
            <param name="includeFirst">
            A boolean field which may be set to “true” or “false”.
            If it is set to “true”, the candlestick covered by the start timestamp will be returned.
            If it is set to “false”, this candlestick will not be returned.
            This field exists so clients may easily ensure that they can poll for all candles more recent than their last received candle.
            The default for includeFirst is “true” if the includeFirst parameter is not specified.
            </param>
            <param name="dailyAlignment">
            The hour of day used to align candles with hourly, daily, weekly, or monthly granularity.
            The value specified is interpretted as an hour in the timezone set through the
            alignmentTimezone parameter and must be an integer between 0 and 23.
            The default for dailyAlignment is 21 when Eastern Daylight Time is in effect and 22 when
            Eastern Standard Time is in effect. This corresponds to 17:00 local time in New York.
            </param>
            <param name="weeklyAlignment">
            Optional The timezone to be used for the dailyAlignment parameter.
            This parameter does NOT affect the returned timestamp, the start or end parameters, these will always be in UTC.
            The timezone format used is defined by the http://en.wikipedia.org/wiki/Tz_database, a full list of the
            timezones supported by the REST API can be found http://developer.oanda.com/docs/timezones.txt.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.RateEndpoints.GetCandles(System.String,System.Nullable{Rabun.Oanda.Rest.Models.OandaTypes.GranularityType},System.Nullable{System.Int32},System.Nullable{Rabun.Oanda.Rest.Models.OandaTypes.CandleFormat},System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{Rabun.Oanda.Rest.Models.OandaTypes.WeeklyAlignment})">
            <summary>
            Retrieve instrument history
            Get historical information on an instrument
            </summary>
            <param name="instrument">
            Required Name of the instrument to retrieve history for. 
            The instrument should be one of the available instrument from the /v1/instruments response
            </param>
            <param name="granularity">
            Optional The time range represented by each candlestick. The value specified will determine the alignment of the first candlestick.
            </param>
            <param name="count">
            The number of candles to return in the response.
            This parameter may be ignored by the server depending on the time range provided.
            See “Time and Count Semantics” below for a full description.
            If not specified, count will default to 500. The maximum acceptable value for count is 5000.
            Count should not be specified if both the start and end parameters are also specified.
            </param>
            <param name="candleFormat">
            Candlesticks representation (about candestick representation).
            This can be one of the following: “midpoint” - Midpoint based candlesticks.
            “bidask” - Bid/Ask based candlesticks The default for candleFormat is “bidask” if the candleFormat parameter is not specified.
            </param>
            <param name="includeFirst">
            A boolean field which may be set to “true” or “false”.
            If it is set to “true”, the candlestick covered by the start timestamp will be returned.
            If it is set to “false”, this candlestick will not be returned.
            This field exists so clients may easily ensure that they can poll for all candles more recent than their last received candle.
            The default for includeFirst is “true” if the includeFirst parameter is not specified.
            </param>
            <param name="dailyAlignment">
            The hour of day used to align candles with hourly, daily, weekly, or monthly granularity.
            The value specified is interpretted as an hour in the timezone set through the
            alignmentTimezone parameter and must be an integer between 0 and 23.
            The default for dailyAlignment is 21 when Eastern Daylight Time is in effect and 22 when
            Eastern Standard Time is in effect. This corresponds to 17:00 local time in New York.
            </param>
            <param name="weeklyAlignment">
            Optional The timezone to be used for the dailyAlignment parameter.
            This parameter does NOT affect the returned timestamp, the start or end parameters, these will always be in UTC.
            The timezone format used is defined by the http://en.wikipedia.org/wiki/Tz_database, a full list of the
            timezones supported by the REST API can be found http://developer.oanda.com/docs/timezones.txt.
            </param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:Rabun.Oanda.Rest.Endpoints.TradeEndpoints">
            <summary>
            Trade endpoints
            </summary>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TradeEndpoints.#ctor(System.String,Rabun.Oanda.Rest.Base.AccountType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rabun.Oanda.Rest.Endpoints.TradeEndpoints"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="accountType">Type of the account.</param>
            <param name="accountId">The account identifier.</param>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TradeEndpoints.GetTrades">
            <summary>
            Get a list of open trades
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TradeEndpoints.GetTrades(System.String)">
            <summary>
            Get a list of open trades
            </summary>
            <param name="instrument">Retrieve open trades for a specific instrument only</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TradeEndpoints.GetTrades(System.String,System.Int32)">
            <summary>
            Get a list of open trades
            </summary>
            <param name="instrument">Retrieve open trades for a specific instrument only</param>
            <param name="count">Maximum number of open trades to return. Default: 50 Max value: 500</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TradeEndpoints.GetTrades(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.String)">
            <summary>
            Get a list of open trades
            </summary>
            <param name="instrument">Retrieve open trades for a specific instrument only</param>
            <param name="count">Maximum number of open trades to return. Default: 50 Max value: 500</param>
            <param name="maxId">The server will return trades with id less than or equal to this, in descending order (for pagination)</param>
            <param name="ids"> A (URL encoded) comma separated list of trades to retrieve. Maximum number of ids: 50. No other parameter may be specified with the ids parameter</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TradeEndpoints.GetTrades(System.String,Rabun.Oanda.Rest.Models.OandaTypes.Side,System.Int32)">
            <summary>
            Get a list of open trades (especially usefull for closing trades in FIFO style)
            </summary>
            <param name="instrument">Retrieve open trades for a specific instrument only</param>
            <param name="side">Retrieve open trades for a specific side only</param>
            <param name="units">Retrieve open trades with a specific number of units</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TradeEndpoints.GetTrade(System.Int64)">
            <summary>
            Get information on a specific trade
            </summary>
            <param name="tradeId">Trade id</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TradeEndpoints.UpdateTrade(System.Int64,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})">
            <summary>
            Modify an existing trade
            </summary>
            <param name="tradeId">Trade id</param>
            <param name="stopLoss">Stop Loss value</param>
            <param name="takeProfit">Take Profit value</param>
            <param name="trailingStop">Trailing Stop distance in pips, up to one decimal place</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TradeEndpoints.CloseTrade(System.Int64)">
            <summary>
            Close an open trade
            </summary>
            <param name="tradeId">Trade id</param>
            <returns></returns>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TradeEndpoints.CloseTrade(System.String,Rabun.Oanda.Rest.Models.OandaTypes.Side,System.Int32)">
            <summary>
            Close an open trade by using th FIFO algorithem...
            </summary>
            <param name="instrument">Retrieve open trades for a specific instrument only</param>
            <param name="side">Retrieve open trades for a specific side only</param>
            <param name="units">Retrieve open trades with a specific number of units</param>
            <returns></returns>
        </member>
        <member name="T:Rabun.Oanda.Rest.Endpoints.TransactionEndpoints">
            <summary>
            Transaction endpoints
            </summary>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TransactionEndpoints.#ctor(System.String,Rabun.Oanda.Rest.Base.AccountType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rabun.Oanda.Rest.Endpoints.TransactionEndpoints"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="accountType">Type of the account.</param>
            <param name="accountId">The account identifier.</param>
        </member>
        <member name="M:Rabun.Oanda.Rest.Endpoints.TransactionEndpoints.GetTransactions(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Get transaction history
            </summary>
            <param name="maxId">The first transaction to get. The server will return transactions with id less than or equal to this, in descending order</param>
            <param name="minId">The last transaction to get. The server will return transactions with id greater or equal to this, in descending order</param>
            <param name="count">The maximum number of transactions to return. The maximum value that can be specified is 500. By default, if count is not specified, a maximum of 50 transactions will be fetched. Note: Transactions requests with the count parameter specified is rate limited to 1 per every 60 seconds</param>
            <param name="instrument">Retrieve transactions for a specific instrument only</param>
            <param name="ids">An URL encoded comma (%2C) separated list of transaction ids to retrieve. Maximum number of ids: 50. No other parameter may be specified with the ids parameter</param>
            <returns></returns>
        </member>
        <member name="T:Rabun.Oanda.Rest.Factories.DefaultFactory">
            <summary>
            Default factory for all endpoints
            </summary>
        </member>
        <member name="M:Rabun.Oanda.Rest.Factories.DefaultFactory.#ctor(System.String,Rabun.Oanda.Rest.Base.AccountType,System.Int32)">
            <summary>
            Public constructor
            </summary>
            <param name="key">Oanda account private key</param>
            <param name="accountType">Account type (practice or real)</param>
            <param name="accountId">Account Id</param>
        </member>
        <member name="M:Rabun.Oanda.Rest.Factories.DefaultFactory.GetEndpoint``1">
            <summary>
            Make endpoints instance. Use generic method.
            </summary>
            <typeparam name="T">Endpoint type</typeparam>
            <returns></returns>
        </member>
    </members>
</doc>
