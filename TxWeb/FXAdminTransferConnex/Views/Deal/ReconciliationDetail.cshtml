@using FXAdminTransferConnex.Entities
@using FXAdminTransferConnex.Common
@using FXAdminTransferConnexApp
@using Kendo.Mvc.UI;
@model FXAdminTransferConnex.Entities.ReconciliationModel
@{
    ViewBag.Title = "ReconciliationDeal";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@helper MyHeaderTemplate()
{
    <span style='text-align:right'>Remove All<br /></span>
    @(Html.CheckBox("MySelectAllBox", false,
            new
            {
                style = "font-size:inherit; margin-top:5px",
                @onchange = "handleSelectAllClick(this)"
            })
        )
    @*@(Html.CheckBox("Check",true,new {}))*@
}
@using (Html.BeginForm("SaveReconciliation", "Deal", FormMethod.Post, new { @id = "ReconciliationForm", enctype = "multipart/form-data" }))
{
    @*@Html.HiddenFor(m => m.ReconciliationId)*@

    <div class="content">
        <legend>Re-conciliation Details</legend>
        <fieldset>
            <legend></legend>
            <div class="panel panel-default divCompare" id="divMissingRecord" style="display: none;">
                <div class="panel-heading cursor-pointer" data-toggle="collapse" data-target="#divMissingRecordCompare">
                    <h4 class="panel-title">
                        <span class="fa fa-minus mr-10"></span>
                        Missing Records
                    </h4>
                </div>
                <div id="divMissingRecordCompare" class="panel-body in">
                    <div class="row">
                        <div class="col-sm-12">
                            @(Html.Kendo().Grid<ReconciliationMissingOrMismatchModel>()
                            .Name("gridMissingRecords")
                            .Columns(columns =>
                            {
                                if (WebHelper.CanDelete())
                                {
                                    columns.Command(command =>
                                    {
                                        if (WebHelper.CanDelete())
                                        {
                                            command.Custom("Delete").Text("<span title='Remove' class='k-icon k-delete-white'></span>").Click("onDelete").HtmlAttributes(new { @style = "margin:2px;background:#ff1962;color:white;" });
                                            //command.Destroy().Text(" ").HtmlAttributes(new { @style = "margin:2px" });
                                        }
                                    })

                                        .HeaderHtmlAttributes(Common.CenterColumnStyle)
                                        .HtmlAttributes(Common.CenterColumnStyle)
                                        .HeaderTemplate("<button type='button' class='btn btn-danger' id='removeAll' onclick='RemoveAll()'>Remove All</button>")
                                        .Title("")
                                        .Width(80);
                                }
                                columns.Bound(m => m.DealRef);
                                columns.Bound(m => m.AccountName);
                                columns.Bound(m => m.AccountId);
                            })
                            .Pageable(x =>
                            {
                                x.Refresh(true);
                                x.PageSizes(new int[] { 10, 20, 50, 100 });
                            })
                            .Selectable(selectable => selectable
                            .Mode(GridSelectionMode.Multiple)
                            .Type(GridSelectionType.Row)
                            )

                            .Navigatable()
                            .AutoBind(false)
                            .Sortable(sortable => sortable.AllowUnsort(false))
                            .NoRecords()
                            .DataSource(dataSource => dataSource
                            .Ajax()
                            .ServerOperation(false)
                            .PageSize(ConfigItems.GridPageSize)
                            .Model(model =>
                            {
                                model.Id(d => d.ReconciliationId);
                            })
                            .Read(read => read.Action("GetMissingReconciliationDeal", "Deal"))
                            )
                            /*.Events(ev => ev.Change("onChange"))*/)

                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-default divCompare" id="divUnmatchRecord" style="display: none;">
                <div class="panel-heading cursor-pointer" data-toggle="collapse" data-target="#divUnmatchRecordCompare">
                    <h4 class="panel-title">
                        <span class="fa fa-minus mr-10"></span>
                        Un-match Records
                    </h4>
                </div>
                <div id="divUnmatchRecordCompare" class="panel-body in">
                    <div class="row">
                        <div class="col-sm-12">
                            @(Html.Kendo().Grid<ReconciliationMissingOrMismatchModel>()
                        .Name("gridMismatchRecords")
                        .Columns(columns =>
                        {
                            //columns.Bound(m => m.ClientSoldCCY).Sortable(false).Title("").ClientTemplate("<a style='color: white;' href='" + Url.Action("ManageDeal", "Deal") + "?DealId=#= DealId #'" + ">#=DealRef#</a>");
                            if (WebHelper.CanEdit())
                            {
                                columns.Command(command =>
                                {
                                    command.Custom("Edit").Text("<span>Merge</span>").Click("onMergeClick").HtmlAttributes(new { @style = "margin:2px;background: transparent;color:white;" });
                                })
                                    .HeaderHtmlAttributes(Common.CenterColumnStyle)
                                    .HtmlAttributes(Common.CenterColumnStyle)
                                    .HeaderTemplate("<button type='button' class='btn btn-primary' id='mergeAll' onclick='MergeAll()'>Merge All</button>")
                                    .Title("")
                                    .Width(80);
                            }

                            columns.Bound(m => m.Source).Sortable(false).Filterable(false);
                            columns.Bound(m => m.ReportYear).Sortable(false).Filterable(false);
                            columns.Bound(m => m.AccountName).Sortable(false).Width(150).Filterable(false);
                            columns.Bound(m => m.AccountId).Sortable(false).Width(150).Filterable(false);
                            columns.Bound(m => m.DealRef).Sortable(false).Width(150).ClientTemplate("<a style='color: white;' href='" + Url.Action("ManageDeal", "Deal") + "?DealId=#= DealId #'" + ">#=DealRef#</a>").Filterable(x=>x.Extra(false).Operators(op=>op.ForString(str=>str.Clear().IsEqualTo("Is equal to"))));
                            columns.Bound(m => m.strTradeDate).Sortable(false).Title("Trade Date").Filterable(false);
                            columns.Bound(m => m.strValueDate).Sortable(false).Title("Value Date").Filterable(false);
                            columns.Bound(m => m.ClientBoughtAmount).Sortable(false).Filterable(false);
                            columns.Bound(m => m.ClientBoughtCCY).Sortable(false).Filterable(false);
                            columns.Bound(m => m.ClientSoldAmount).Sortable(false).Filterable(false);
                            columns.Bound(m => m.ClientSoldCCY).Sortable(false).Filterable(false); ;
                            columns.Bound(m => m.ClientSoldAmountGBP).Sortable(false).Filterable(false);
                            columns.Bound(m => m.GrossCommsGBP).Sortable(false).Filterable(false);
                            columns.Bound(m => m.MismatchColumn).Sortable(false).Filterable(false);
                        })
                        .Pageable(x =>
                        {
                            x.Refresh(false);
                            //x.PageSizes(new int[] { 10, 20, 50, 100, 1000 });
                        })
                        .Selectable(selectable => selectable
                        .Mode(GridSelectionMode.Single))
                        .Navigatable()
                        .AutoBind(false)
                        .Sortable(sortable => sortable.AllowUnsort(true))
                         .Filterable()
                        .NoRecords()
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .ServerOperation(true)
                        .PageSize(ConfigItems.GridPageSize)
                        .Model(model =>
                        {
                            model.Id(d => d.ReconciliationId);
                        })
                        .Read(read => read.Action("GetMismatchReconciliationDeal", "Deal"))
                        ).Events(events => events.DataBound("onDataBound")))
                        </div>
                    </div>
                </div>
            </div>

            <div class="panel panel-default divCompare" id="divReconsiliationUnmatchRecord" style="display: none;">
                <div class="panel-heading cursor-pointer" data-toggle="collapse" data-target="#divReconsiliationUnmatchRecordCompare">
                    <h4 class="panel-title">
                        <span class="fa fa-minus mr-10"></span>
                        Missing Records in Uploaded Sheet
                    </h4>
                </div>
                <div id="divReconsiliationUnmatchRecordCompare" class="panel-body in">
                    <div class="row">
                        <div class="col-sm-12">
                          

                            @(Html.Kendo().Grid<ReconciliationMissingOrMismatchModel>()
                                          .Name("gridReconsiliationUnmatchRecords")
                                          .Columns(columns =>
                                          {
                                              columns.Bound(m => m.ReportYear);
                                              columns.Bound(m => m.DealRef).ClientTemplate("<a href='" + Url.Action("ManageDeal", "Deal") + "?DealId=#= DealId #'" + ">#=DealRef#</a>");
                                              columns.Bound(m => m.AccountName);
                                              columns.Bound(m => m.AccountId);
                                              //columns.Bound(m => m.ReportMonth);
                                              //columns.Bound(m => m.ReportYear);
                                          })
                                          .Editable(e => e.Mode(GridEditMode.PopUp))
                                          .Pageable(x =>
                                          {
                                              x.Refresh(false);
                                              x.PageSizes(new int[] { 10, 20, 50, 100, 1000 });
                                          })
                                          //.Events(events => events.ExcelExport("excelExport").AllPages(true))
                                          //.Excel(excel => excel.FileName("Deallist.xlsx").Filterable(true).AllPages(true))
                                          .Selectable(selectable => selectable
                                          .Mode(GridSelectionMode.Single))
                                          .Navigatable()
                                          .Sortable(sortable => sortable.AllowUnsort(false))
                                          .NoRecords()
                                          .DataSource(dataSource => dataSource
                                              .Ajax()
                                              .ServerOperation(true)
                                              .PageSize(ConfigItems.GridPageSize)
                                              .Model(model =>
                                              {
                                                  model.Id(d => d.DealId);
                                              })
                                            .Read(read => read.Action("GetUnmatchReconciliationDeal", "Deal").Data("additionalInfo"))
                                          ))

                        </div>
                    </div>
                </div>
            </div>
        </fieldset>
    </div>
}

<script type="text/javascript">
    function compareClick() {
        $(".divCompare").show();

        //read will request the server and reload only reload datasource
        $('#gridMissingRecords').data('kendoGrid').dataSource.read();

        //refresh will re-render items in grid from the current datasource
        $('#gridMissingRecords').data('kendoGrid').refresh();

        //read will request the server and reload only reload datasource
        $('#gridMismatchRecords').data('kendoGrid').dataSource.read();

        //refresh will re-render items in grid from the current datasource
        $('#gridMismatchRecords').data('kendoGrid').refresh();

        ////read will request the server and reload only reload datasource
        //$('#gridReconsiliationUnmatchRecords').data('kendoGrid').dataSource.read();

        ////refresh will re-render items in grid from the current datasource
        //$('#gridReconsiliationUnmatchRecords').data('kendoGrid').refresh();
    }

    $(function () {
        var container = $("#ReconciliationForm");
        kendo.init(container);
        container.kendoValidator({});
        $("#ReconciliationFile").closest(".k-upload-button").find("span").text("Select Excel File...");
    });
    function onDataBound(e) {
        $.each(e.sender._data,
            function (i, row) {
                if (i == 0 || i == 1 || i == 4 || i == 5 || i == 8 || i == 9) {
                    $('tr[data-uid="' + row.uid + '"] ').css({ "background-color": "#251180", "color": "white" });

                } else if (i == 2 || i == 3 || i == 6 || i == 7) {
                    $('tr[data-uid="' + row.uid + '"] ').css({ "background-color": "#ad1845","color":"white"});
                }
                if (row.Source == "Excel") {
                    $('tr[data-uid="' + row.uid + '"] td:last-child').attr("rowspan", "2");
                    $('tr[data-uid="' + row.uid + '"] ').next("tr").find("td:eq(13)").remove();

                    $('tr[data-uid="' + row.uid + '"] td:first-child').attr("rowspan", "2"); //changes
                    $('tr[data-uid="' + row.uid + '"] ').next("tr").find("td:eq(0)").remove(); // changes
                    $('tr[data-uid="' + row.uid + '"] ').next("tr").find("td:eq(0)").css({ "border-left-width": "1px"});
                }
            });
    }

    $(document).ready(function () {
        var havePermission ='@WebHelper.CanView()';
        if (havePermission.toLowerCase()=="false") {
            var urllink = '@Url.Action("PermissionDenied", "Common")';
            window.location.href = urllink;
        }
        compareClick();        
    });
    $("#divUnmatchRecordCompare").click(function (e) {
        $('#divUnmatchRecordCompare').find('tr').removeClass('k-state-selected');
    });

    function MergeAll() {
        var grid = $("#gridMismatchRecords").data("kendoGrid").dataSource.data().length
       if (grid > 0) {
            bootbox.confirm("Are you sure you want to merge all records?",
                function (result) {
                    if (result) {
                        $.ajax({
                            url: encodeURI('@Url.Action("GetMismatchReconciliationDeal", "Deal")'),
                            /* data: { request:data},*/
                            cache: false,
                            async: false,
                            dataType: 'json',
                            error: function (jqXHR, exception) {
                            },
                            success: function (data) {
                                if (data.Data != null) {
                                    //reconciliation_array = data.Data;
                                    var rec = $('#gridMissingRecords').data();
                                    $.ajax({
                                        type: "POST",
                                        url: encodeURI('@Url.Action("MergeAllReconciliationData", "Deal")'),
                                        data: { MismatchReconciliationDeal: data.Data },
                                        cache: false,
                                        async: false,
                                        error: function (jqXHR, exception) {
                                        },
                                        success: function (data) {
                                            if (data.data > 0) {
                                                toastr.success("All records merge successfully.");
                                                compareClick();
                                            }
                                            else {
                                                toastr.error("Something went wrong.");
                                            }
                                        }

                                    });
                                }
                                else {
                                    toastr.error("Something went wrong.");
                                }
                            }
                        })

                    }
                });
        }
        else {
           $('#mergeAll').attr('disabled', 'disabled');
           $('#mergeAll').css({ "background-color": "#337ab7" });
        }


    }

    function onMergeClick(e) {
        var current = this;
        bootbox.confirm("Are you sure you want to merge this data?",
            function (result) {
                let DealRef = 0;
                let MismatchColumn = '';
                e.preventDefault();
                var tr = $(e.target).closest("tr");
                var data = current.dataItem(tr);
                DealRef = data.DealRef;
                MismatchColumn = data.MismatchColumn;
                if (result) {
                $.ajax({
                    type: "POST",
                    url: encodeURI('@Url.Action("MergerReconciliationData", "Deal")'),
                    data: { DealRef: DealRef, MismatchColumn: MismatchColumn },
                    cache: false,
                    async: false,
                    //dataType: 'json',
                    error: function (jqXHR, exception) {
                    },
                    success: function (data) {
                        if (data.data > 0) {
                            compareClick();
                        }
                        else {
                            toastr.error("Something went wrong.");
                        }
                    }

                });
            }
            });

    }
    function RemoveAll() {
        var current = this;
        var grid = $("#gridMissingRecords").data("kendoGrid").dataSource.data().length
        if (grid > 0) {
            bootbox.confirm("Are you sure you want to remove all records?",
                function (result) {
                    if (result) {
                        var reconciliation_array = 0;

                        $.ajax({
                            url: encodeURI('@Url.Action("DeleteAllMissingRecords", "Deal")'),
                            cache: false,
                            async: false,
                            dataType: 'json',
                            error: function (jqXHR, exception) {

                            },
                            success: function (data) {
                                if (data) {
                                    DisplayResponseMessageForAjax(data);
                                    //ForAjax(data);
                                    $('#gridMissingRecords').data('kendoGrid').dataSource.read();
                                }
                            }
                        });

                    }
                });
        }
        else {
            $('#removeAll').attr('disabled', 'disabled');
            $('#removeAll').css({ "background-color": "#d9534f" });
        }

    }

    function onDelete(e) {
        var current = this;
        bootbox.confirm("Are you sure you want to delete this record?",
            function(result) {
                if (result) {
                    var reconciliationId = 0;

                    if (e != 0) {
                        e.preventDefault();
                        var tr = $(e.target).closest("tr");
                        var data = current.dataItem(tr);

                        if (data != null) {
                            reconciliationId = data.ReconciliationId;

                            $.ajax({
                                type: "POST",
                                url: encodeURI('@Url.Action("DeleteMissingRecords", "Deal")'),
                                data: { reconciliationId: reconciliationId },
                                cache: false,
                                async: false,
                                error: function (jqXHR, exception) {
                                },
                                success: function (data) {
                                    if (data) {
                                        DisplayResponseMessageForAjax(data);
                                       //ForAjax(data);
                                        $('#gridMissingRecords').data('kendoGrid').dataSource.read();
                                    }
                                }

                            });
                        }
                    }

                }
            });

    }
    function additionalInfo() {
        return {
            Source: 'CurrencyCloud'
        };
    }
</script>