@using FXAdminTransferConnex.Entities;
@using FXAdminTransferConnex.Common
@using FXAdminTransferConnexApp
@using Kendo.Mvc.UI

<div class="content">
    <legend>Trader List</legend>
    <div class="panel panel-default">
        <div class="panel-body pb-0">
            <div class="row">
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-3">
                            <div class="form-group">
                                <input id="txtSearch" type="text" placeholder="Search" class="k-textbox Search" />
                            </div>
                        </div>
                        <div class="col-sm-9">
                            <div class="form-group">
                                <button id="btnSearch" type="button" class="k-button btn-orange">Search</button>
                                <button id="btnReset" type="button" class="k-button btn-orange">Reset</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* GRID HERE *@

    <fieldset>
        <legend></legend>
        <div class="panel panel-default">
            <div class="panel-body">




                @(Html.Kendo().Grid<TraderModel>()
                  .Name("gridTrader")
                  .Columns(columns =>
                  {
                      columns.Bound(m => m.FirstName).Width(150);
                      columns.Bound(m => m.LastName).Width(150);
                      columns.Bound(m => m.CompanyName).Width(150);
                      columns.Bound(m => m.EmailAddress);
                      columns.Bound(m => m.MobileNo);
                      columns.Bound(m => m.JoiningDateString);
                      if (WebHelper.CanEdit() || WebHelper.CanDelete())
                      {
                          columns.Command(command =>
                          {
                              if (WebHelper.CanEdit())
                              {
                                  command.Custom("Edit").Text("<span class='k-icon k-edit-white'></span>").Click("onInsert").HtmlAttributes(new { @style = "margin:2px;background: #0833b7;color:white;" });
                              }
                              if (WebHelper.CanDelete())
                              {
                                  command.Custom("Delete").Text("<span class='k-icon k-delete-white'></span>").Click("onDelete").HtmlAttributes(new { @style = "margin:2px;background:#ff1962;color:white;" });
                                  //command.Destroy().Text(" ").HtmlAttributes(new { @style = "margin:2px" });
                              }
                          })
                              .HeaderHtmlAttributes(Common.CenterColumnStyle)
                              .HtmlAttributes(Common.CenterColumnStyle)
                              .Title("Action")
                              .Width(150);
                      }
                  })
                  .ToolBar(toolbar =>
                  {
                      if (WebHelper.CanAdd())
                      {
                          toolbar.Custom().Text("Add Trader").Url(Url.Action("ManageTrader", "Trader")).HtmlAttributes(new { @class = "k-button btn-orange" });
                      }

                  })
                  .Editable(e => e.Mode(GridEditMode.PopUp))
                  .Pageable(x =>
                  {
                      x.Refresh(true);
                      x.PageSizes(new int[] { 10, 20, 50, 100 });
                  })
                  .Selectable(selectable => selectable
                  .Mode(GridSelectionMode.Single))
                  .Navigatable()
                  .Sortable(sortable => sortable.AllowUnsort(false))
                  .NoRecords()
                  .DataSource(dataSource => dataSource
                      .Ajax()
                      .ServerOperation(true)
                      .PageSize(ConfigItems.GridPageSize)
                      .Model(model =>
                      {
                          model.Id(d => d.TraderId);
                      })
                     .Destroy(delete => delete.Action("DeleteTrader", "Trader"))
                    .Read(read => read.Action("GetTraderList", "Trader"))
                    .Events(events => events.RequestEnd("onRequestEnd"))
                  ))
            </div>
        </div>
    </fieldset>
</div>
<script>
    $(document).ready(function () {
        var havePermission ='@WebHelper.CanView()';
        if (havePermission.toLowerCase()=="false") {
            var urllink = '@Url.Action("PermissionDenied", "Common")';
            window.location.href = urllink;
        }
        kendoGridScroll();
    });

    $('.k-pager-refresh').click(function () {
        $('.Search').val('');
    });

    $('#btnReset').click(function () {
        $('.Search').val('');
        $('#gridTrader').data('kendoGrid').dataSource.read({ Search: $('#txtSearch').val().trim()});
    });

    $("#btnSearch").click(function () {
        //if ($('#txtsearch').val() !== "") {
        $('#gridTrader').data('kendoGrid').dataSource.read({ Search: $('#txtSearch').val().trim() });
        //}
    });

    $('.Search').keypress(function (e) {
        var key = e.which;
        if (key == 13)  // the enter key code
        {
            //if ($('.Search').val() !== "") {
            $('#gridTrader').data('kendoGrid').dataSource.read({ Search: $('#txtSearch').val().trim() });
            //}
        }
    });

    //Shows the notifications
    function onRequestEnd(para) {
        if (para.type == 'update' || para.type == 'create' || para.type == 'destroy') {
            $('#gridTrader').data('kendoGrid').dataSource.read({ Search: $('#txtSearch').val().trim() });
        }
        DisplayResponseMessage(para);
    }

    function onInsert(e) {
        var traderId = 0;

        if (e != 0) {
            e.preventDefault();
            var tr = $(e.target).closest("tr");
            var data = this.dataItem(tr);

            if (data != null) {
                traderId = data.TraderId;
            }
        }
        var urllink = '@Url.Action("ManageTrader", "Trader")';
        window.location.href = urllink + "?TraderId=" + traderId;
    }

    function onDelete(e) {
        var current = this;
        bootbox.confirm("Are you sure you want to delete this record?",
            function(result) {
                if (result) {
                    var traderId = 0;

                    if (e != 0) {
                        e.preventDefault();
                        var tr = $(e.target).closest("tr");
                        var data = current.dataItem(tr);
                        
                        if (data != null) {
                            traderId = data.TraderId;

                            $.ajax({
                                type: "POST",
                                url: encodeURI('@Url.Action("DeleteTrader", "Trader")'),
                                data: { traderId: traderId },
                                cache: false,
                                async: false,
                                error: function (jqXHR, exception) {
                                },
                                success: function (data) {
                                    if (data) {
                                        DisplayResponseMessageForAjax(data);
                                        $('#gridTrader').data('kendoGrid').dataSource.read();
                                    }
                                }

                            });
                        }
                    }

                    
                }
            });
       
    }
</script>