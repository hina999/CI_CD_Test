@using FXAdminTransferConnex.Data.Models
@using FXAdminTransferConnex.Entities
@using FXAdminTransferConnexApp
@using Kendo.Mvc.UI
@{
    ViewBag.Title = "Index";
}


<style>
    [type="checkbox"]:not(:checked), [type="checkbox"]:checked {
    position: relative !important;
    left: 0px !important;
}

</style>
<div class="content">
    <legend>Manage Access Rights</legend>
    <fieldset>
        <legend></legend>
        <div class="panel panel-default">
            <div class="panel-body">
                @(Html.Kendo().Grid<UserType>()
                  .Name("grid")
                  .Columns(columns =>
                  {
                      columns.Bound(m => m.Name).Title("User Role");
                      columns.Command(command =>
                      {
                          if (WebHelper.CanEdit())
                          {
                              command.Custom("Assign").Click("assignRights").Text("<span class='k-icon k-i-gear k-i-cog k-i-custom'></span>").HtmlAttributes(new { @title = "Assign rights" });
                          }
                          
                      }).Title("Action").Width(80);
                  })
                  .Pageable(x =>
                  {
                      x.Refresh(false);
                      x.PageSizes(true);
                  })
                  .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
                  .Sortable(sortable => sortable.AllowUnsort(false))
                  .NoRecords()
                  .DataSource(dataSource => dataSource
                      .Ajax()
                      .ServerOperation(false)
                      .PageSize(10)
                              .Read(read => read.Action("KendoRead", "UserRights"))
                  ))
            </div>
        </div>
    </fieldset>
</div>

@(Html.Kendo().Window()
    .Name("window")
    .Visible(false)
    .Draggable(false)
    .Modal(true)
    .Width(650)
    .Height(450))

<script>
    function assignRights(e) {
        e.preventDefault();
        var tr = $(e.target).closest("tr");
        var data = this.dataItem(tr);
        var urllink = '@Url.Action("UserTypeMenusView", "UserRights")';

        setLocalValue('UserTypeId', data.UserTypeId);

        var window = $("#window").data("kendoWindow");
        window.content("");
        window.title(data.Name);
        window.refresh({
            url: urllink
        });

        window.center();
        window.open();

    }

    function additionalInfo() {
        return {
            userTypeId: getLocalValue('UserTypeId')
        };
    }

    function Reset() {
        readKendoGrid('gvRoleMenus');
    }

    function CheckAllView() {
        var chkItem = $('.chkView');
        var chkHeader = $('#chkHeaderView');
        if ($('#gvRoleMenus ' + chkItem.selector).length !== 0 && $('#gvRoleMenus ' + chkItem.selector).length === $('#gvRoleMenus ' + chkItem.selector + ':checked').length) {
            if (chkHeader.length > 0) {
                $(chkHeader[0]).prop('checked', true);
            }
        } else {
            if (chkHeader.length > 0) {
                $(chkHeader[0]).prop('checked', false);
            }
        }
    }

    function CheckAllEdit() {
        var chkItem = $('.chkEdit');
        var chkHeader = $('#chkHeaderEdit');
        if ($('#gvRoleMenus ' + chkItem.selector).length !== 0 && $('#gvRoleMenus ' + chkItem.selector).length === $('#gvRoleMenus ' + chkItem.selector + ':checked').length) {
            if (chkHeader.length > 0) {
                $(chkHeader[0]).prop('checked', true);
            }
        } else {
            if (chkHeader.length > 0) {
                $(chkHeader[0]).prop('checked', false);
            }
        }
    }

    function CheckAllAdd() {
        var chkItem = $('.chkAdd');
        var chkHeader = $('#chkHeaderAdd');
        if ($('#gvRoleMenus ' + chkItem.selector).length !== 0 && $('#gvRoleMenus ' + chkItem.selector).length === $('#gvRoleMenus ' + chkItem.selector + ':checked').length) {
            if (chkHeader.length > 0) {
                $(chkHeader[0]).prop('checked', true);
            }
        } else {
            if (chkHeader.length > 0) {
                $(chkHeader[0]).prop('checked', false);
            }
        }
    }

    function CheckAllDelete() {
        var chkItem = $('.chkDelete');
        var chkHeader = $('#chkHeaderDelete');
        if ($('#gvRoleMenus ' + chkItem.selector).length !== 0 && $('#gvRoleMenus ' + chkItem.selector).length === $('#gvRoleMenus ' + chkItem.selector + ':checked').length) {
            if (chkHeader.length > 0) {
                $(chkHeader[0]).prop('checked', true);
            }
        } else {
            if (chkHeader.length > 0) {
                $(chkHeader[0]).prop('checked', false);
            }
        }
    }

    function onGridDataSourceRequestEnd() {
        CheckAllDelete();
        CheckAllAdd();
        CheckAllEdit();
        CheckAllView();
    }

    function dataBound() {
        CheckAllDelete();
        CheckAllAdd();
        CheckAllEdit();
        CheckAllView();
    }
</script>