name: 🚨 Code Formatting & Naming Convention Check (.NET Framework 4.5)

on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]
    branches: [main, dev]

jobs:
  code-formatting:
    name: ✨ Code Formatting & Naming Check
    runs-on: windows-latest
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write
      checks: write
      statuses: write

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Identify Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.cs
            **/*.csproj
            **/*.sln

      - name: 🧰 Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: 🧩 Restore NuGet Packages
        run: nuget restore FXAdminTransferConnex.sln

      - name: 🔎 Run StyleCop Analyzers (via MSBuild)
        run: msbuild FXAdminTransferConnex.sln /p:RunCodeAnalysis=true /p:Configuration=Release

      - name: 📝 Generate StyleCop Report (rudimentary)
        run: |
          echo "## StyleCop Report" > stylecop-report.md
          echo "Generated on $(date /T) $(time /T)" >> stylecop-report.md
          echo "If using analyzers, you may need to manually configure reporting for violations." >> stylecop-report.md

      - name: 🔍 Manual Naming Convention Check
        id: naming-check
        continue-on-error: true
        run: |
          echo "Checking naming conventions..."
          $ErrorFound = 0
          $ChangedFiles = "${{ steps.changed-files.outputs.all_changed_files }}".Split("`n") | Where-Object { $_.EndsWith(".cs") }

          foreach ($file in $ChangedFiles) {
            Write-Host "Checking file: $file"

            if (Select-String -Path $file -Pattern "class " -Quiet) {
              if (-not (Select-String -Path $file -Pattern "class\s+[A-Z][a-zA-Z0-9]*" -Quiet)) {
                Write-Output "::error file=$file::Class name should be PascalCase."
                $ErrorFound = 1
              }
            }

            if (Select-String -Path $file -Pattern "\s+[A-Z]{2,}\w*\s*=" -Quiet) {
              Write-Output "::error file=$file::Variable name should be camelCase."
              $ErrorFound = 1
            }
          }

          echo "exit_code=$ErrorFound" >> $env:GITHUB_OUTPUT
          if ($ErrorFound -eq 1) { exit 1 }

      - name: 💬 Post Formatting Report
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let report = '## 📝 Manual Naming and Formatting Check\n\nChecked changed files for PascalCase class names and camelCase variables.\n';
            report += '\nIf you want automated formatting, consider using tools like ReSharper CLI or Roslyn analyzers integrated into the build process.';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });

      - name: 🚫 Block Merge on Naming Issues
        if: steps.naming-check.outputs.exit_code != '0'
        run: |
          echo "::error::Naming convention issues found. Please fix them before merging."
          exit 1
